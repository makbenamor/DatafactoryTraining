{
	"name": "Transform data cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sink_ecdc_raw_dl_static",
						"type": "DatasetReference"
					},
					"name": "casesdeathssource"
				},
				{
					"dataset": {
						"referenceName": "lookup_country",
						"type": "DatasetReference"
					},
					"name": "countryLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Processed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "europecasesdeaths"
				}
			],
			"transformations": [
				{
					"name": "FilterEuropeOnly"
				},
				{
					"name": "selectonlyrequired"
				},
				{
					"name": "pivotcounts"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "SelectforSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true) ~> casesdeathssource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryLookup",
				"casesdeathssource filter(continent <=> 'Europe' && not(isNull(country_code))) ~> FilterEuropeOnly",
				"FilterEuropeOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          daily_count,",
				"          reported_Date = date,",
				"          source,",
				"          cases_indicator = indicator",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectonlyrequired",
				"selectonlyrequired pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          reported_Date),",
				"     pivotBy(cases_indicator, ['confirmed cases', 'deaths']),",
				"     count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotcounts",
				"pivotcounts, countryLookup lookup(pivotcounts@country == countryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = pivotcounts@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivotcounts@population,",
				"          {confirmed cases_count},",
				"          deaths_count,",
				"          reported_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectforSink",
				"SelectforSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['cases_deaths_processed'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> europecasesdeaths"
			]
		}
	}
}