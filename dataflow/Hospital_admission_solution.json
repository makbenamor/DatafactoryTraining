{
	"name": "Hospital_admission_solution",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "hospitaladmissionraw"
				},
				{
					"dataset": {
						"referenceName": "lookup_country",
						"type": "DatasetReference"
					},
					"name": "country"
				},
				{
					"dataset": {
						"referenceName": "DimDateSource",
						"type": "DatasetReference"
					},
					"name": "dimsourceDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "weeklyProcessed",
						"type": "DatasetReference"
					},
					"name": "WeeklySink"
				},
				{
					"dataset": {
						"referenceName": "Daily_sink_processed",
						"type": "DatasetReference"
					},
					"name": "DailySink"
				}
			],
			"transformations": [
				{
					"name": "selectrequiredcols"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "splitdailyFromWeeekly"
				},
				{
					"name": "AggDimDate"
				},
				{
					"name": "JoinWeekDate"
				},
				{
					"name": "PivotDaily"
				},
				{
					"name": "PivotWeekly"
				},
				{
					"name": "SortingByDateNCountryWeekly"
				},
				{
					"name": "SortingByDateNCountryDaily"
				},
				{
					"name": "SelectWeekly"
				},
				{
					"name": "SelectDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hospitaladmissionraw",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> country",
				"source(output(",
				"          date_key as string,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimsourceDate",
				"hospitaladmissionraw select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredcols",
				"selectrequiredcols, country lookup(selectrequiredcols@country == country@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          country = selectrequiredcols@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(indicator=='Weekly new hospital admissions per 100k' || indicator== \"Weekly new ICU admissions per 100k\",",
				"     disjoint: false) ~> splitdailyFromWeeekly@(Weekly, Daily)",
				"dimsourceDate aggregate(groupBy(ecdc_year_week = toString(year) + '-W' + lpad(toString(week_of_year),2,'0')),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimDate",
				"splitdailyFromWeeekly@Weekly, AggDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWeekDate",
				"splitdailyFromWeeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     {count } = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotDaily",
				"JoinWeekDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     {count } = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotWeekly",
				"PivotWeekly sort(desc(reported_year_week, false),",
				"     desc({Weekly new hospital admissions per 100k_count }, false),",
				"     desc({Weekly new ICU admissions per 100k_count }, false)) ~> SortingByDateNCountryWeekly",
				"PivotDaily sort(desc(reported_date, false),",
				"     desc({Daily hospital occupancy_count }, false),",
				"     desc({Daily ICU occupancy_count }, false)) ~> SortingByDateNCountryDaily",
				"SortingByDateNCountryWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          {Weekly new hospital admissions per 100k_count },",
				"          {Weekly new ICU admissions per 100k_count }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWeekly",
				"SortingByDateNCountryDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          {Hospital occupancy_count } = {Daily hospital occupancy_count },",
				"          {ICU occupancy_count } = {Daily ICU occupancy_count }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDaily",
				"SelectWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['fileweekly'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          reported_week_start_date,",
				"          reported_week_end_date,",
				"          {Weekly new hospital admissions per 100k_count },",
				"          {Weekly new ICU admissions per 100k_count }",
				"     ),",
				"     partitionBy('hash', 1)) ~> WeeklySink",
				"SelectDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['dailyfile'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DailySink"
			]
		}
	}
}